{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onSelectPost","selectedPostId","className","map","post","userId","title","type","onClick","id","BASE_URL","reject","Error","status","NewCommentForm","onAddComment","useState","name","setName","email","setEmail","comment","setComment","placeholder","value","onChange","event","target","preventDefault","PostDetails","setPost","comments","setComments","isCommentsShown","setIsCommentsShown","loadPost","postId","fetch","then","res","json","catch","postFromServer","loadComments","commentsFromServer","useEffect","handleDeleteComment","a","commentId","method","handleAddComment","body","newComment","headers","JSON","stringify","length","Loader","App","setPosts","users","setUsers","isLoadingPosts","setIsLoadingPosts","selectedUserId","setSelectedUserId","setSelectedPostId","loadUsers","usersFromServer","loadPosts","postsFromServer","loadUserPosts","userPostsFromServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8d3e73c.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  onSelectPost: (id: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelectPost,\n  selectedPostId,\n}) => {\n  const handleSelectPost = (id: number) => {\n    if (id === selectedPostId) {\n      onSelectPost(0);\n    } else {\n      onSelectPost(id);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleSelectPost(post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { Comment } from '../types/comment';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nconst reject = {\n  Error: 'Something gone wrong',\n  status: 418,\n};\n\nexport function getUserPosts(userId: number) {\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then(res => res.json())\n    .catch(() => reject);\n}\n\nexport function getPosts() {\n  return fetch(`${BASE_URL}/posts`)\n    .then(res => res.json())\n    .catch(() => reject);\n}\n\nexport function getUsers() {\n  return fetch(`${BASE_URL}/users`)\n    .then(res => res.json())\n    .catch(() => reject);\n}\n\nexport function getPostDetails(postId: number) {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(res => res.json())\n    .catch(() => reject);\n}\n\nexport function getPostComments(postId: number) {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(res => res.json())\n    .catch(() => reject);\n}\n\nexport function deleteComment(commentId: number) {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n}\n\nexport function addComment(comment: Comment) {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n}\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  onAddComment: (name: string, email: string, body: string) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddComment }) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [comment, setComment] = useState<string>('');\n\n  // eslint-disable-next-line max-len\n  const sendComment = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n\n    onAddComment(name, email, comment);\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={event => setComment(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={sendComment}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport {\n  addComment,\n  deleteComment,\n  getPostComments,\n  getPostDetails,\n} from '../../api/api';\nimport { Comment } from '../../types/comment';\nimport { Post } from '../../types/post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsShown, setIsCommentsShown] = useState<boolean>(true);\n\n  const loadPost = () => {\n    getPostDetails(selectedPostId).then(postFromServer => {\n      if (!('Error' in postFromServer)) {\n        setPost(postFromServer);\n      }\n    });\n  };\n\n  const loadComments = () => {\n    getPostComments(selectedPostId).then(commentsFromServer => {\n      if (!('Error' in commentsFromServer)) {\n        setComments(commentsFromServer);\n      }\n    });\n  };\n\n  useEffect(() => {\n    loadPost();\n    loadComments();\n    setIsCommentsShown(true);\n  }, [selectedPostId]);\n\n  const handleDeleteComment = async (id?: number) => {\n    if (id) {\n      await deleteComment(id);\n      loadComments();\n    }\n  };\n\n  const handleAddComment = async (name: string, email: string, body: string) => {\n    const newComment: Comment = {\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    };\n\n    await addComment(newComment);\n    loadComments();\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{post?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => (isCommentsShown ? setIsCommentsShown(false) : setIsCommentsShown(true))}\n          >\n            {isCommentsShown\n              ? `Hide ${comments.length} comments`\n              : `Show ${comments.length} comments`}\n          </button>\n        )}\n\n        <ul className=\"PostDetails__list\" data-cy=\"postList\">\n          {isCommentsShown\n              && comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => handleDeleteComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onAddComment={handleAddComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/post';\nimport { getPosts, getUserPosts, getUsers } from './api/api';\nimport { Loader } from './components/Loader';\nimport { User } from './types/user';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoadingPosts, setIsLoadingPosts] = useState<boolean>(false);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n\n  const loadUsers = () => {\n    getUsers().then(usersFromServer => {\n      if (!('Error' in usersFromServer)) {\n        setUsers(usersFromServer);\n      }\n    });\n  };\n\n  const loadPosts = async () => {\n    setIsLoadingPosts(true);\n\n    // users.forEach(user => {\n    //   getUserPosts(user.id).then(res => {\n    //     if (!('Error' in res)) {\n    //       res.forEach((element: Post) => {\n    //         setPosts(prew => [...prew, element]);\n    //       });\n    //     }\n    //   });\n    // });\n\n    await getPosts().then((postsFromServer) => {\n      if (!('Error' in postsFromServer)) {\n        setPosts(postsFromServer);\n      }\n    });\n\n    setIsLoadingPosts(false);\n  };\n\n  const loadUserPosts = async (id: number) => {\n    setIsLoadingPosts(true);\n\n    await getUserPosts(id).then(userPostsFromServer => {\n      if (!('Error' in userPostsFromServer)) {\n        setPosts(userPostsFromServer);\n      }\n    });\n\n    setIsLoadingPosts(false);\n  };\n\n  useEffect(() => {\n    loadUsers();\n    loadPosts();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId > 0) {\n      loadUserPosts(selectedUserId);\n    } else {\n      loadPosts();\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    // if (selectedPostId > 0) {\n\n    // }\n  }, [selectedPostId]);\n\n  const handleSelectPost = (id: number) => {\n    setSelectedPostId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoadingPosts\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                onSelectPost={handleSelectPost}\n                selectedPostId={selectedPostId}\n              />\n            )}\n        </div>\n        {selectedPostId > 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}